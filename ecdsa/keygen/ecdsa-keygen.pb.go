// Code generated by protoc-gen-go. DO NOT EDIT.
// source: protob/ecdsa-keygen.proto

package keygen

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Represents a BROADCAST message sent during Round 1 of the ECDSA TSS keygen protocol.
type KGRound1Message struct {
	Commitment           []byte   `protobuf:"bytes,1,opt,name=commitment,proto3" json:"commitment,omitempty"`
	PaillierN            []byte   `protobuf:"bytes,2,opt,name=paillier_n,json=paillierN,proto3" json:"paillier_n,omitempty"`
	NTilde               []byte   `protobuf:"bytes,3,opt,name=n_tilde,json=nTilde,proto3" json:"n_tilde,omitempty"`
	H1                   []byte   `protobuf:"bytes,4,opt,name=h1,proto3" json:"h1,omitempty"`
	H2                   []byte   `protobuf:"bytes,5,opt,name=h2,proto3" json:"h2,omitempty"`
	Dlnproof_1           [][]byte `protobuf:"bytes,6,rep,name=dlnproof_1,json=dlnproof1,proto3" json:"dlnproof_1,omitempty"`
	Dlnproof_2           [][]byte `protobuf:"bytes,7,rep,name=dlnproof_2,json=dlnproof2,proto3" json:"dlnproof_2,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *KGRound1Message) Reset()         { *m = KGRound1Message{} }
func (m *KGRound1Message) String() string { return proto.CompactTextString(m) }
func (*KGRound1Message) ProtoMessage()    {}
func (*KGRound1Message) Descriptor() ([]byte, []int) {
	return fileDescriptor_1a2e19e981cdbb01, []int{0}
}

func (m *KGRound1Message) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_KGRound1Message.Unmarshal(m, b)
}
func (m *KGRound1Message) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_KGRound1Message.Marshal(b, m, deterministic)
}
func (m *KGRound1Message) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KGRound1Message.Merge(m, src)
}
func (m *KGRound1Message) XXX_Size() int {
	return xxx_messageInfo_KGRound1Message.Size(m)
}
func (m *KGRound1Message) XXX_DiscardUnknown() {
	xxx_messageInfo_KGRound1Message.DiscardUnknown(m)
}

var xxx_messageInfo_KGRound1Message proto.InternalMessageInfo

func (m *KGRound1Message) GetCommitment() []byte {
	if m != nil {
		return m.Commitment
	}
	return nil
}

func (m *KGRound1Message) GetPaillierN() []byte {
	if m != nil {
		return m.PaillierN
	}
	return nil
}

func (m *KGRound1Message) GetNTilde() []byte {
	if m != nil {
		return m.NTilde
	}
	return nil
}

func (m *KGRound1Message) GetH1() []byte {
	if m != nil {
		return m.H1
	}
	return nil
}

func (m *KGRound1Message) GetH2() []byte {
	if m != nil {
		return m.H2
	}
	return nil
}

func (m *KGRound1Message) GetDlnproof_1() [][]byte {
	if m != nil {
		return m.Dlnproof_1
	}
	return nil
}

func (m *KGRound1Message) GetDlnproof_2() [][]byte {
	if m != nil {
		return m.Dlnproof_2
	}
	return nil
}

// Represents a P2P message sent to each party during Round 2 of the ECDSA TSS keygen protocol.
type KGRound2Message1 struct {
	Share                []byte   `protobuf:"bytes,1,opt,name=share,proto3" json:"share,omitempty"`
	FacProof             [][]byte `protobuf:"bytes,2,rep,name=facProof,proto3" json:"facProof,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *KGRound2Message1) Reset()         { *m = KGRound2Message1{} }
func (m *KGRound2Message1) String() string { return proto.CompactTextString(m) }
func (*KGRound2Message1) ProtoMessage()    {}
func (*KGRound2Message1) Descriptor() ([]byte, []int) {
	return fileDescriptor_1a2e19e981cdbb01, []int{1}
}

func (m *KGRound2Message1) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_KGRound2Message1.Unmarshal(m, b)
}
func (m *KGRound2Message1) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_KGRound2Message1.Marshal(b, m, deterministic)
}
func (m *KGRound2Message1) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KGRound2Message1.Merge(m, src)
}
func (m *KGRound2Message1) XXX_Size() int {
	return xxx_messageInfo_KGRound2Message1.Size(m)
}
func (m *KGRound2Message1) XXX_DiscardUnknown() {
	xxx_messageInfo_KGRound2Message1.DiscardUnknown(m)
}

var xxx_messageInfo_KGRound2Message1 proto.InternalMessageInfo

func (m *KGRound2Message1) GetShare() []byte {
	if m != nil {
		return m.Share
	}
	return nil
}

func (m *KGRound2Message1) GetFacProof() [][]byte {
	if m != nil {
		return m.FacProof
	}
	return nil
}

// Represents a BROADCAST message sent to each party during Round 2 of the ECDSA TSS keygen protocol.
type KGRound2Message2 struct {
	DeCommitment         [][]byte `protobuf:"bytes,1,rep,name=de_commitment,json=deCommitment,proto3" json:"de_commitment,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *KGRound2Message2) Reset()         { *m = KGRound2Message2{} }
func (m *KGRound2Message2) String() string { return proto.CompactTextString(m) }
func (*KGRound2Message2) ProtoMessage()    {}
func (*KGRound2Message2) Descriptor() ([]byte, []int) {
	return fileDescriptor_1a2e19e981cdbb01, []int{2}
}

func (m *KGRound2Message2) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_KGRound2Message2.Unmarshal(m, b)
}
func (m *KGRound2Message2) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_KGRound2Message2.Marshal(b, m, deterministic)
}
func (m *KGRound2Message2) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KGRound2Message2.Merge(m, src)
}
func (m *KGRound2Message2) XXX_Size() int {
	return xxx_messageInfo_KGRound2Message2.Size(m)
}
func (m *KGRound2Message2) XXX_DiscardUnknown() {
	xxx_messageInfo_KGRound2Message2.DiscardUnknown(m)
}

var xxx_messageInfo_KGRound2Message2 proto.InternalMessageInfo

func (m *KGRound2Message2) GetDeCommitment() [][]byte {
	if m != nil {
		return m.DeCommitment
	}
	return nil
}

// Represents a BROADCAST message sent to each party during Round 3 of the ECDSA TSS keygen protocol.
type KGRound3Message struct {
	PaillierProof        [][]byte `protobuf:"bytes,1,rep,name=paillier_proof,json=paillierProof,proto3" json:"paillier_proof,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *KGRound3Message) Reset()         { *m = KGRound3Message{} }
func (m *KGRound3Message) String() string { return proto.CompactTextString(m) }
func (*KGRound3Message) ProtoMessage()    {}
func (*KGRound3Message) Descriptor() ([]byte, []int) {
	return fileDescriptor_1a2e19e981cdbb01, []int{3}
}

func (m *KGRound3Message) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_KGRound3Message.Unmarshal(m, b)
}
func (m *KGRound3Message) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_KGRound3Message.Marshal(b, m, deterministic)
}
func (m *KGRound3Message) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KGRound3Message.Merge(m, src)
}
func (m *KGRound3Message) XXX_Size() int {
	return xxx_messageInfo_KGRound3Message.Size(m)
}
func (m *KGRound3Message) XXX_DiscardUnknown() {
	xxx_messageInfo_KGRound3Message.DiscardUnknown(m)
}

var xxx_messageInfo_KGRound3Message proto.InternalMessageInfo

func (m *KGRound3Message) GetPaillierProof() [][]byte {
	if m != nil {
		return m.PaillierProof
	}
	return nil
}

func init() {
	proto.RegisterType((*KGRound1Message)(nil), "binance.tsslib.ecdsa.keygen.KGRound1Message")
	proto.RegisterType((*KGRound2Message1)(nil), "binance.tsslib.ecdsa.keygen.KGRound2Message1")
	proto.RegisterType((*KGRound2Message2)(nil), "binance.tsslib.ecdsa.keygen.KGRound2Message2")
	proto.RegisterType((*KGRound3Message)(nil), "binance.tsslib.ecdsa.keygen.KGRound3Message")
}

func init() { proto.RegisterFile("protob/ecdsa-keygen.proto", fileDescriptor_1a2e19e981cdbb01) }

var fileDescriptor_1a2e19e981cdbb01 = []byte{
	// 296 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0x91, 0xcf, 0x4a, 0xf3, 0x40,
	0x14, 0xc5, 0x69, 0xfa, 0xb5, 0xfd, 0xbc, 0xb4, 0x51, 0x06, 0xc1, 0x51, 0x51, 0x4a, 0x44, 0x70,
	0x63, 0xca, 0x4c, 0x17, 0xba, 0x56, 0xc1, 0x85, 0x28, 0x52, 0x5c, 0xb9, 0x09, 0x93, 0xcc, 0x6d,
	0x33, 0x98, 0xcc, 0x84, 0x4c, 0x5c, 0xf8, 0x84, 0xbe, 0x96, 0x64, 0xf2, 0x07, 0x83, 0xcb, 0xf3,
	0x3b, 0x73, 0x4f, 0x72, 0xcf, 0x85, 0xe3, 0xa2, 0x34, 0x95, 0x89, 0x57, 0x98, 0x48, 0x2b, 0xae,
	0x3f, 0xf0, 0x6b, 0x87, 0x3a, 0x74, 0x8c, 0x9c, 0xc6, 0x4a, 0x0b, 0x9d, 0x60, 0x58, 0x59, 0x9b,
	0xa9, 0x38, 0x74, 0x4f, 0xc2, 0xe6, 0x49, 0xf0, 0x3d, 0x82, 0xfd, 0xa7, 0xc7, 0x8d, 0xf9, 0xd4,
	0x92, 0x3d, 0xa3, 0xb5, 0x62, 0x87, 0xe4, 0x1c, 0x20, 0x31, 0x79, 0xae, 0xaa, 0x1c, 0x75, 0x45,
	0x47, 0xcb, 0xd1, 0xd5, 0x7c, 0xf3, 0x8b, 0x90, 0x33, 0x80, 0x42, 0xa8, 0x2c, 0x53, 0x58, 0x46,
	0x9a, 0x7a, 0xce, 0xdf, 0xeb, 0xc8, 0x0b, 0x39, 0x82, 0x99, 0x8e, 0x2a, 0x95, 0x49, 0xa4, 0x63,
	0xe7, 0x4d, 0xf5, 0x5b, 0xad, 0x88, 0x0f, 0x5e, 0xca, 0xe8, 0x3f, 0xc7, 0xbc, 0x94, 0x39, 0xcd,
	0xe9, 0xa4, 0xd5, 0xbc, 0xce, 0x95, 0x99, 0x2e, 0x4a, 0x63, 0xb6, 0x11, 0xa3, 0xd3, 0xe5, 0xb8,
	0xce, 0xed, 0x08, 0x1b, 0xd8, 0x9c, 0xce, 0x86, 0x36, 0x0f, 0x1e, 0xe0, 0xa0, 0x5d, 0x84, 0xb7,
	0x8b, 0x30, 0x72, 0x08, 0x13, 0x9b, 0x8a, 0x12, 0xdb, 0x25, 0x1a, 0x41, 0x4e, 0xe0, 0xff, 0x56,
	0x24, 0xaf, 0xf5, 0x18, 0xf5, 0x5c, 0x4c, 0xaf, 0x83, 0x9b, 0x3f, 0x29, 0x9c, 0x5c, 0xc0, 0x42,
	0x62, 0x34, 0xa8, 0xa4, 0x1e, 0x9a, 0x4b, 0xbc, 0xef, 0x59, 0x70, 0xdb, 0xf7, 0xb8, 0xee, 0x7a,
	0xbc, 0x04, 0xbf, 0xef, 0xc9, 0xfd, 0x64, 0x3b, 0xb8, 0xe8, 0xa8, 0xfb, 0xe4, 0x9d, 0xff, 0x3e,
	0x77, 0x27, 0x59, 0x35, 0x27, 0x89, 0xa7, 0xee, 0x6c, 0xeb, 0x9f, 0x00, 0x00, 0x00, 0xff, 0xff,
	0x19, 0x20, 0x42, 0x95, 0xd3, 0x01, 0x00, 0x00,
}
